// boot实现
c02.02 用汇编代码接管控制权
c02.03 第一个汇编程序
c02.04 使用BIOS中断显示字符
c02.05 使用BIOS中断读取磁盘
c02.06 进入C语言环境并跳到loader

// loader实现
c03.01 利用内联汇编显示字符串
c03.02 检测内存信息
c03.03 切换至图形显示模式
c03.05 切换至32位保护模式
c03.06 创建内核工程
c03.07 使用LBA读取内核
c03.08 使用ELF文件格式的内核

// 中断系统配置
c04.01 创建GDT表及其表项
c04.01 重新加载GDT

在这里把exception_frame_t去掉，后面加
c04.08 添加其它所有的异常处理
c04.09 配置并启动定时器
c04.10 开启定时器中断

c05.01 创建日志打印接口
c05.02 实现基本的信息输出
c05.03 若干字符串和内存操作函数实现
c05.04 支持字符串的格式化
c05.05 支持整数的格式化
c05.06 打印异常的信息

c06.01 添加任务状态段
c06.02 任务的简单初始化
c06.03 双任务相互切换
c07.01 定义结点和链表
c07.02 链表的查询函数
c07.03 链表的两种插入
c07.04 链表的两种删除
c07.05 获取结点所在的结构

c08.01 添加任务管理器
c08.02 将任务加入就绪队列
c08.03 任务主动放弃CPU
c08.04 让任务按时间片运行 （时间片切换任务时输出会有问题，在log_print中）
c08.05 开关中断保护临界资源
c08.06 单个任务延时运行
c08.07 双任务延时运行
